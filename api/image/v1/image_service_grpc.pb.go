// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/image_service.proto

package imagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageService_GenerateImage_FullMethodName            = "/image.v1.ImageService/GenerateImage"
	ImageService_GenerateImageAsync_FullMethodName       = "/image.v1.ImageService/GenerateImageAsync"
	ImageService_GetImageTask_FullMethodName             = "/image.v1.ImageService/GetImageTask"
	ImageService_GenerateSequentialImages_FullMethodName = "/image.v1.ImageService/GenerateSequentialImages"
	ImageService_HealthCheck_FullMethodName              = "/image.v1.ImageService/HealthCheck"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ImageService 图片生成服务
type ImageServiceClient interface {
	// GenerateImage 生成图片
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
	// GenerateImageAsync 异步生成图片
	GenerateImageAsync(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageAsyncResponse, error)
	// GetImageTask 获取图片生成任务状态
	GetImageTask(ctx context.Context, in *GetImageTaskRequest, opts ...grpc.CallOption) (*GetImageTaskResponse, error)
	// GenerateSequentialImages 生成序列图片
	GenerateSequentialImages(ctx context.Context, in *GenerateSequentialImagesRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, ImageService_GenerateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GenerateImageAsync(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateImageAsyncResponse)
	err := c.cc.Invoke(ctx, ImageService_GenerateImageAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImageTask(ctx context.Context, in *GetImageTaskRequest, opts ...grpc.CallOption) (*GetImageTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageTaskResponse)
	err := c.cc.Invoke(ctx, ImageService_GetImageTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GenerateSequentialImages(ctx context.Context, in *GenerateSequentialImagesRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, ImageService_GenerateSequentialImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ImageService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility.
//
// ImageService 图片生成服务
type ImageServiceServer interface {
	// GenerateImage 生成图片
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	// GenerateImageAsync 异步生成图片
	GenerateImageAsync(context.Context, *GenerateImageRequest) (*GenerateImageAsyncResponse, error)
	// GetImageTask 获取图片生成任务状态
	GetImageTask(context.Context, *GetImageTaskRequest) (*GetImageTaskResponse, error)
	// GenerateSequentialImages 生成序列图片
	GenerateSequentialImages(context.Context, *GenerateSequentialImagesRequest) (*GenerateImageResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServiceServer struct{}

func (UnimplementedImageServiceServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedImageServiceServer) GenerateImageAsync(context.Context, *GenerateImageRequest) (*GenerateImageAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImageAsync not implemented")
}
func (UnimplementedImageServiceServer) GetImageTask(context.Context, *GetImageTaskRequest) (*GetImageTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageTask not implemented")
}
func (UnimplementedImageServiceServer) GenerateSequentialImages(context.Context, *GenerateSequentialImagesRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSequentialImages not implemented")
}
func (UnimplementedImageServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}
func (UnimplementedImageServiceServer) testEmbeddedByValue()                      {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GenerateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GenerateImageAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GenerateImageAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GenerateImageAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GenerateImageAsync(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GetImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageTask(ctx, req.(*GetImageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GenerateSequentialImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSequentialImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GenerateSequentialImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GenerateSequentialImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GenerateSequentialImages(ctx, req.(*GenerateSequentialImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.v1.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImage",
			Handler:    _ImageService_GenerateImage_Handler,
		},
		{
			MethodName: "GenerateImageAsync",
			Handler:    _ImageService_GenerateImageAsync_Handler,
		},
		{
			MethodName: "GetImageTask",
			Handler:    _ImageService_GetImageTask_Handler,
		},
		{
			MethodName: "GenerateSequentialImages",
			Handler:    _ImageService_GenerateSequentialImages_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ImageService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image_service.proto",
}
